% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/funHDDCwavelet.R, R/impl.R
\docType{package}
\name{funHDDCwavelet}
\alias{funHDDCwavelet}
\alias{funHDDCwavelet-package}
\title{Perform the funHDDCwavelet algorithm on a matrix of time series}
\usage{
funHDDCwavelet(X, K, minD = 1, maxD = 1,
  max.level = round(log2(ncol(X))), dimTest = "scree",
  wavelet.family = "DaubExPhase", wavelet.filter.number = 4,
  init = "kmeans", minPerClass = 10, threshold = 0.01,
  minIter = 10, maxIter = 50, poolSize = 5, verbose = FALSE,
  viz = F)
}
\arguments{
\item{X}{A matrix of time series (each line correspond to a time serie, each column to an time point)}

\item{K}{The number of classes to find}

\item{minD}{The minimum dimension of the subspace where a level can be represented (default : 1)}

\item{maxD}{The maximum dimension of the subspace where a level can be represented (default : 1)}

\item{max.level}{The maximum wavelet transform level used in the algorithm (default : all levels, depending of the time serie length)}

\item{dimTest}{The intrinsec dimension estimation method. Available : "scree", "kss", "mean", "XX\%" (ex "85\%") (default: "scree")}

\item{wavelet.family}{The wavelet family used for the discrete wavelet transform (see wavethresh package). Default : "DaubExPhase"}

\item{wavelet.filter.number}{The filter number used in for the discrete wavelet transform (see wavethresh package). Default : 4}

\item{init}{Type of initialization method. Available : "kmeans", "random" (default : "kmeans")}

\item{minPerClass}{The minimal size of the initial classes}

\item{threshold}{The threshold used to determine that the log-likelihood converged. Default : 0.01}

\item{minIter}{The minimal number of iterations of the EM algorithm}

\item{maxIter}{The maximal number of iterations of the EM algorithm}

\item{poolSize}{The number of run of the algorithm (the algorithm is executed poolSize times, and the best model is selected via BIC) Default : 5}

\item{verbose}{if TRUE, prompt some information of the algorithm status over time}

\item{viz}{if TRUE, plot the first 2 axes of the data after principal component analysis, with current cluster repartitions and colors}
}
\description{
This package provide an implementation of the funHDDCwavelet algorithm. This algorithm allow the clustering of time series
by representing them in a parcimonious and multi-resolution way.
}
\examples{
\dontrun{
dataset = generateDataset()
X = dataset$X
real_cluster = dataset$col

# Haar wavelet
result = funHDDCwavelet(X,K=3,minD=1,maxD=1,wavelet.family="DaubExPhase",wavelet.filter.number=1,viz=TRUE,minIter=10)
clusters = apply(result$tm,1,which.max)
adjustedRandIndex(clusters,real_cluster)
plot.curve.dataset(X,col=clusters,ratio=0.1)
}

}
